import express from "express";
import cors from "cors";
import dotenv from "dotenv";
import path from "path";
import { fileURLToPath } from "url";
import { fetch } from "undici";

dotenv.config();

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();
app.use(cors());
app.use(express.json());
app.use(express.static(path.join(__dirname, "public")));

const BRAVE_KEY = (process.env.BRAVE_KEY || "").trim();
const PORT = process.env.PORT || 3000;

/* ---------- –£—Ç–∏–ª–∏—Ç—ã ---------- */
function normalizeText(text) {
  const dict = {
    "—á–µ":"—á—Ç–æ","—á–æ":"—á—Ç–æ","—à–æ":"—á—Ç–æ","–∏–∑–∏":"–ª–µ–≥–∫–æ","—Ç–æ–ø—á–∏–∫":"–æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ",
    "–≤–∏–¥–æ—Å":"–≤–∏–¥–µ–æ","–≥–æ":"–¥–∞–≤–∞–π","–ª—é—Ç—ã–π":"–æ—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π","–∫–∞–∫ –∂–∏–∑–Ω—å":"–∫–∞–∫ –¥–µ–ª–∞"
  };
  let norm = (text || "").toLowerCase().trim();
  for (const [slang, normal] of Object.entries(dict)) {
    norm = norm.replace(new RegExp(`\\b${slang}\\b`, "gi"), normal);
  }
  // —É–±–µ—Ä—ë–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
  norm = norm.replace(/\s+/g, " ");
  return norm;
}
function detectStyleAuto(text) {
  const t = (text || "").toLowerCase();
  const isShort = t.split(/\s+/).filter(Boolean).length <= 6;
  const hasSlang = /(—á–µ|—á–æ|–∏–∑–∏|—Ç–æ–ø—á–∏–∫|–≥–æ|–Ω–æ—Ä–º–∞—Å|–ª—é—Ç—ã–π|—á–µ–ª|–±—Ä–æ|–ª–æ–ª|–∞—Ö–∞—Ö)/.test(t);
  const polite = /(–ø–æ–∂–∞–ª—É–π—Å—Ç–∞|–Ω–µ –º–æ–≥–ª–∏ –±—ã|–±—É–¥—å—Ç–µ –¥–æ–±—Ä—ã|–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ)/.test(t) || /\b–≤—ã\b/.test(t);
  if (polite && !hasSlang) return "formal";
  if (hasSlang || isShort) return "friendly";
  return "formal";
}
function applyStyleLock(autoStyle, styleLock) {
  if (styleLock === "friendly" || styleLock === "formal") return styleLock;
  return autoStyle;
}
function isAscii(str) { return typeof str === "string" && /^[\x00-\x7F]*$/.test(str); }

/* ---------- –î–µ—Ç–µ–∫—Ç–æ—Ä –Ω–∞–º–µ—Ä–µ–Ω–∏—è ---------- */
function detectIntent(query) {
  const q = normalizeText(query);
  if (!q) return "EMPTY";

  // —á—ë—Ç–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –°–ù–ê–ß–ê–õ–ê (–¥–æ –≤—Å–µ–≥–æ –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ)
  if (/(^|\s)(–ø—Ä–∏–≤–µ—Ç|–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π|–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ|–π–æ|—Ö–∞–π|–ø—Ä–∏–≤|–¥–∞—Ä–æ–≤–∞)\b/.test(q)) return "GREETING";
  if (/(–∫–∞–∫ –¥–µ–ª–∞|—á—Ç–æ –Ω–æ–≤–æ–≥–æ|–∫–∞–∫ —Ç—ã|–∫–∞–∫ –∂–∏–∑–Ω—å)/.test(q)) return "HOW_ARE_YOU";
  if (/\b(—Å–ø–∞—Å–∏–±–æ|–±–ª–∞–≥–æ–¥–∞—Ä—é|–º–µ—Ä—Å–∏)\b/.test(q)) return "THANKS";
  if (/\b(–ø–æ–∫–∞|–¥–æ –≤—Å—Ç—Ä–µ—á–∏|—É–≤–∏–¥–∏–º—Å—è|–±–∞–π)\b/.test(q)) return "BYE";

  // –≤—Ä–µ–º—è ‚Äî –ª–æ–≤–∏–º —Å–∞–º—ã–µ —á–∞—Å—Ç—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏
  if (/\b(–≤—Ä–µ–º—è|–∫–æ—Ç–æ—Ä—ã–π —á–∞—Å|—Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º—è|—Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏)\b/.test(q)) return "TIME";

  // —è–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ –≤–µ–±—É/–Ω–æ–≤–æ—Å—Ç—è–º
  if (/(–Ω–æ–≤–æ—Å—Ç–∏|—Ç—Ä–µ–Ω–¥—ã|—Å–∏—Ç—É–∞—Ü–∏—è|–æ–±—ä—è—Å–Ω–∏|—Ä–∞—Å—Å–∫–∞–∂–∏( –ø—Ä–æ| –æ–±)?|–Ω–∞–π–¥–∏|–ø–æ–∏—â–∏|google|–≤ –≥—É–≥–ª–µ|–≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ|–±—Ä–∞—É–∑–µ—Ä)/.test(q)) {
    return "WEB_SEARCH";
  }

  // –≤–æ–ø—Ä–æ—Å + –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ–≤ ‚Üí –≤–µ–±-–ø–æ–∏—Å–∫
  const words = q.split(/\s+/).filter(Boolean);
  const hasQ = /[?]/.test(q) || /(–∫—Ç–æ|—á—Ç–æ|–≥–¥–µ|–∫–æ–≥–¥–∞|–ø–æ—á–µ–º—É|–∑–∞—á–µ–º|–∫–∞–∫|—Å–∫–æ–ª—å–∫–æ)\b/.test(q);
  if (hasQ && words.length >= 4) return "WEB_SEARCH";

  // –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–æ ‚Üí —É—Ç–æ—á–Ω—è–µ–º
  if (words.length <= 3) return "SMALL_TALK";

  // –æ–±—ã—á–Ω–∞—è –±–µ—Å–µ–¥–∞ –±–µ–∑ –ø–æ–∏—Å–∫–∞
  return "GENERAL_CHAT";
}

/* ---------- Brave Search ---------- */
async function braveSearch(q) {
  if (!BRAVE_KEY || !isAscii(BRAVE_KEY)) {
    return { disabled: true, items: [] };
  }
  const url = `https://api.search.brave.com/res/v1/web/search?q=${encodeURIComponent(q)}&count=3&freshness=day`;
  const res = await fetch(url, { headers: { "X-Subscription-Token": BRAVE_KEY } });
  if (!res.ok) {
    const body = await res.text().catch(()=> "");
    throw new Error(`Brave API ${res.status}: ${body}`);
  }
  const data = await res.json();
  const items = (data.web?.results ?? []).map(r => ({
    title: r.title, url: r.url, snippet: r.snippet || r.description || ""
  }));
  return { disabled: false, items };
}

/* ---------- Routes ---------- */
app.get("/healthz", (_req,res)=>res.json({ok:true,time:new Date().toISOString()}));
app.get("/api/meta", (_req,res)=>res.json({
  status:"online",
  web_search_enabled: !!(BRAVE_KEY && isAscii(BRAVE_KEY))
}));

app.post("/api/assist", async (req,res)=>{
  try{
    const query = (req.body?.query || "").trim();
    const styleLock = (req.body?.styleLock || "auto");
    if (!query) return res.status(400).json({ reply: "–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å.", style: "formal" });

    const intent = detectIntent(query);
    const autoStyle = detectStyleAuto(query);
    const style = applyStyleLock(autoStyle, styleLock);

    // –õ–û–ì, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å, —á—Ç–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ
    console.log(`[assist] intent=${intent} style=${style} query="${query}"`);

    if (intent === "GREETING")
      return res.json({ reply: style==="friendly"?"–ô–æ! üëã –†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å üòé":"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!", style });

    if (intent === "HOW_ARE_YOU")
      return res.json({ reply: style==="friendly"?"–î–∞ –Ω–æ—Ä–º–∞—Å, –≤—Å—ë —á—ë—Ç–∫–æ üòé –ê —É —Ç–µ–±—è –∫–∞–∫?":"–£ –º–µ–Ω—è –≤—Å—ë —Ö–æ—Ä–æ—à–æ, —Å–ø–∞—Å–∏–±–æ. –ö–∞–∫ —É –≤–∞—Å –¥–µ–ª–∞?", style });

    if (intent === "THANKS")
      return res.json({ reply: style==="friendly"?"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! üôå":"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞.", style });

    if (intent === "BYE")
      return res.json({ reply: style==="friendly"?"–î–æ —Å–≤—è–∑–∏! üëã":"–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!", style });

    if (intent === "TIME") {
      const now = new Date().toLocaleTimeString("ru-RU",{hour:"2-digit",minute:"2-digit"});
      return res.json({ reply: style==="friendly"?`–ë—Ä–æ, —Å–µ–π—á–∞—Å ${now} üòâ`:`–°–µ–π—á–∞—Å ${now}.`, style });
    }

    if (intent === "SMALL_TALK")
      return res.json({ reply: style==="friendly"?"–ü–æ–Ω—è–ª üëç –°–ø—Ä–æ—Å–∏ —á—Ç–æ-—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ.":"–ü–æ–Ω–∏–º–∞—é. –£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.", style });

    if (intent === "GENERAL_CHAT")
      return res.json({ reply: style==="friendly"?"–û–∫–µ–π, –ø–æ–Ω—è–ª —Ç–µ–±—è. –ú–æ–≥—É –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–∫—Ç–æ–≤ –∏–ª–∏ —Å—Å—ã–ª–æ–∫, –µ—Å–ª–∏ –Ω–∞–¥–æ üòâ":"–ü–æ–Ω–∏–º–∞—é. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –º–æ–≥—É –¥–æ–±–∞–≤–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –∏–ª–∏ —Å—Å—ã–ª–∫–∏.", style });

    // WEB_SEARCH
    const { disabled, items } = await braveSearch(normalizeText(query));
    if (disabled) return res.json({ reply: "–ü–æ–∏—Å–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", style });
    if (!items.length) return res.json({ reply: `–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ ¬´${query}¬ª.`, style });

    const top = items[0];
    return res.json({ reply: `${top.snippet || ""}\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ: ${top.url}`, style, actions:[{type:"open_url",url:top.url}] });

  } catch(e) {
    console.error(e);
    return res.status(500).json({ reply:"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.", style:"formal" });
  }
});

/* ---------- –ó–∞–ø—É—Å–∫ ---------- */
app.listen(PORT, ()=> {
  console.log(`‚úÖ Server ready: http://localhost:${PORT}`);
  console.log(`üîé Health:  http://localhost:${PORT}/healthz`);
  console.log(`‚ÑπÔ∏è  Meta:    http://localhost:${PORT}/api/meta`);
});
