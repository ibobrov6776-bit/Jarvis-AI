<!DOCTYPE html>
<html lang="ru">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width,initial-scale=1">
<title>JARVIS</title>
<style>
  :root{
    --bg:#0f1117;--sidebar:#0b0f14;--panel:#111826;--panel-2:#0c1320;
    --accent:#10a37f;--accent-2:#1ea992;--text:#e6e7e9;--muted:#a0a8b8;--line:#1f2a3a;
    --user:#1b273a;--bot:#121a28;--radius:12px;--danger:#e05260;
  }
  :root[data-theme="light"]{
    --bg:#f7f8fb; --sidebar:#f1f3f8; --panel:#ffffff; --panel-2:#f6f7fb;
    --accent:#0f9150; --accent-2:#0c7f45; --text:#0e1320; --muted:#4a5670; --line:#e2e6f0;
    --user:#e9eef9; --bot:#f4f6fb; --danger:#d04556;
  }
  /* light overrides */
  :root[data-theme="light"] .side{ border-right-color:#d7deec; }
  :root[data-theme="light"] .head{ background:linear-gradient(180deg,#f5f8ff,transparent); border-bottom-color:#d7deec; }
  :root[data-theme="light"] .composer{ background:linear-gradient(0deg,#f6f8ff,transparent); border-top-color:#d7deec; }
  :root[data-theme="light"] .btn{ background:#e7ecf6; border-color:#c9d4ea; color:#0e1320; }
  :root[data-theme="light"] .btn:hover{ filter:none; box-shadow:0 1px 0 rgba(0,0,0,.04); }
  :root[data-theme="light"] .tab{ background:#eef2fb; border-color:#c9d4ea; color:#0e1320; }
  :root[data-theme="light"] .tab.active{ background:#dfe7ff; border-color:#a9bce8; color:#0e1320; }
  :root[data-theme="light"] .select{ background:#ffffff; border-color:#c9d4ea; color:#0e1320; }
  :root[data-theme="light"] .msgs{ background:#ffffff; }
  :root[data-theme="light"] .bubble{ background:#f7f9ff; border-color:#cfd8ea; color:#0e1320; }
  :root[data-theme="light"] .me .bubble{ background:#eaf2ff; border-color:#b7c8e8; }
  :root[data-theme="light"] .input{ background:#ffffff; border-color:#c9d4ea; color:#0e1320; }
  :root[data-theme="light"] .send{ background:var(--accent); color:#ffffff; }
  :root[data-theme="light"] .action{ background:#eef3ff; border-color:#c9d4ea; color:#0e1320; }
  :root[data-theme="light"] .linkcard{ background:#ffffff; border-color:#c9d4ea; }
  :root[data-theme="light"] .chip{ background:#eef2fb; border-color:#c9d4ea; color:#0e1320; }
  :root[data-theme="light"] .banner{ background:#fff4f6; border-color:#ffd4da; color:#601d28; }
  :root[data-theme="light"] button:focus-visible,
  :root[data-theme="light"] select:focus-visible,
  :root[data-theme="light"] textarea:focus-visible,
  :root[data-theme="light"] a:focus-visible{ outline:3px solid #9bc1ff; outline-offset:2px; border-radius:10px; }

  *{box-sizing:border-box} html,body{height:100%}
  body{margin:0;background:var(--bg);color:var(--text);font:14px/1.5 system-ui,-apple-system,Segoe UI,Roboto,Arial,sans-serif}
  .app{display:grid;grid-template-columns:260px 1fr;height:100vh}
  .side{background:var(--sidebar);border-right:1px solid var(--line);display:flex;flex-direction:column}
  .side .top{padding:12px;border-bottom:1px solid var(--line);display:flex;gap:8px}
  .btn{display:inline-flex;align-items:center;gap:8px;background:var(--panel-2);color:#fff;border:1px solid var(--line);border-radius:10px;padding:10px 12px;cursor:pointer}
  .btn:disabled{opacity:.6;cursor:not-allowed}
  .btn:hover{filter:brightness(1.08)}
  .chats{flex:1;overflow:auto;padding:8px}
  .chat-item{display:flex;gap:8px;align-items:center;padding:10px;border-radius:10px;border:1px solid transparent;cursor:pointer;color:var(--text)}
  .chat-item:hover{background:#0f1826;border-color:#152238}
  .chat-item.active{background:#0f1d2f;border-color:#1c2a44}
  .chat-title{flex:1;overflow:hidden;white-space:nowrap;text-overflow:ellipsis}
  .chat-actions{display:flex;gap:6px;opacity:.7}
  .side .foot{padding:10px;border-top:1px solid var(--line);display:flex;align-items:center;gap:8px;color:var(--muted);font-size:12px}
  .dot{width:8px;height:8px;border-radius:50%}
  .ok{background:#1ec27e} .off{background:#666} .warn{background:#f1c40f}

  .main{display:grid;grid-template-rows:auto 1fr auto}
  .head{display:flex;align-items:center;gap:10px;padding:12px 16px;border-bottom:1px solid var(--line);background:linear-gradient(180deg,#0e1726,transparent)}
  .brand{font-weight:600}
  .sep{flex:1}
  .select{background:#0d1626;border:1px solid #1c2942;border-radius:10px;padding:8px 10px;color:#e9eef9}
  .tabs{display:flex;gap:8px;margin-left:12px}
  .tab{padding:6px 10px;border:1px solid #1c2942;border-radius:10px;background:#0d1626;color:#cbd3e5;cursor:pointer}
  .tab.active{color:#fff;border-color:#2a385a;background:#14203a}
  .banner{display:none;align-items:center;gap:10px;margin:10px auto 0;max-width:820px;color:#fff;background:#2b1b22;border:1px solid #4a2b39;padding:8px 12px;border-radius:10px}
  .banner.on{display:flex}
  .msgs{padding:18px;overflow:auto;background:var(--panel)}
  .msg{max-width:820px;margin:0 auto 14px}
  .bubble{border-radius:16px;padding:12px 14px;border:1px solid #1c273b;background:var(--bot);white-space:pre-wrap;word-break:break-word;position:relative}
  .me .bubble{background:var(--user)}
  .meta{margin-top:6px;color:var(--muted);font-size:11px;display:flex;gap:8px;align-items:center}
  .ibadge{font-size:10px;line-height:1;padding:3px 6px;border-radius:999px;border:1px solid #2a3550;background:#0d1626;color:#cbd3e5}
  :root[data-theme="light"] .ibadge{background:#eef2fb;border-color:#c9d4ea;color:#0e1320}
  .actions{margin-top:8px;display:flex;gap:8px;flex-wrap:wrap}
  .action{font-size:12px;text-decoration:none;color:#dfe7ff;background:#0d1626;border:1px solid #1c2942;border-radius:10px;padding:6px 10px}
  .typing{display:none;color:var(--muted);font-size:12px;margin:8px auto;max-width:820px}
  .typing.on{display:block}
  .panel{display:none;padding:16px}
  .panel.active{display:block}
  .row{display:flex;gap:12px;align-items:center;flex-wrap:wrap;color:#cbd3e5}
  .row .btn{padding:8px 10px}
  .linkcard{display:flex;align-items:center;gap:10px;background:#0d1626;border:1px solid #1c2942;border-radius:10px;padding:8px 10px;max-width:820px}
  .linkcard img{width:16px;height:16px;border-radius:3px}
  .linkcard .dom{font-size:12px;color:#cbd3e5}
  .linkcard .go{margin-left:auto;font-size:12px;color:#a4c0ff;text-decoration:none}
  .copy{position:absolute;top:8px;right:8px;background:#0d1626;border:1px solid #1c2942;border-radius:8px;color:#cbd3e5;font-size:12px;padding:4px 8px;cursor:pointer}
  .copy:hover{filter:brightness(1.1)}
  .toast{position:fixed;left:50%;bottom:24px;transform:translateX(-50%);background:#0d1626;border:1px solid #1c2942;color:#e6e7e9;padding:10px 14px;border-radius:10px;opacity:0;pointer-events:none;transition:opacity .2s}
  .toast.on{opacity:1}
  .sugg{display:flex;gap:8px;flex-wrap:wrap;max-width:820px;margin:8px auto 0;padding:0 18px}
  .chip{display:inline-flex;align-items:center;gap:8px;background:#0d1626;border:1px solid #1c2942;color:#cbd3e5;padding:6px 10px;border-radius:999px;cursor:pointer;font-size:12px}
  .chip:hover{filter:brightness(1.1)}
</style>
</head>
<body>
<div class="app">
  <aside class="side">
    <div class="top">
      <button id="newChat" class="btn">Ôºã –ù–æ–≤—ã–π —á–∞—Ç</button>
      <button id="profileBtn" class="btn">–ü—Ä–æ—Ñ–∏–ª—å</button>
    </div>
    <div id="chats" class="chats"></div>
    <div class="foot">
      <span id="dotOnline" class="dot off"></span><span id="txtOnline">offline</span>
      <span style="margin-left:auto"></span>
      <span id="dotWeb" class="dot off"></span><span id="txtWeb">search off</span>
    </div>
  </aside>

  <main class="main">
    <div class="head">
      <div class="brand">JARVIS</div>
      <div class="tabs">
        <div class="tab active" data-tab="chat">–ß–∞—Ç</div>
        <div class="tab" data-tab="profile">–ü—Ä–æ—Ñ–∏–ª—å</div>
      </div>
      <div class="sep"></div>
      <label style="font-size:12px;color:#a8b2c6">–°—Ç–∏–ª—å&nbsp;</label>
      <select id="styleSel" class="select">
        <option value="auto">auto</option>
        <option value="friendly">friendly</option>
        <option value="formal">formal</option>
      </select>
      <button id="themeBtn" class="btn" style="margin-left:8px">üåô –¢–µ–º–∞</button>
      <button id="intentBtn" class="btn" style="margin-left:8px">üéØ –ò–Ω—Ç–µ–Ω—Ç—ã: –≤—ã–∫–ª</button>
    </div>

    <div id="offlineBanner" class="banner"><span>üîå –ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. </span><button id="reconnect" class="btn">–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è</button></div>

    <div id="viewChat" class="panel active">
      <div id="msgs" class="msgs"></div>
      <div id="typing" class="typing">–ø–µ—á–∞—Ç–∞—é‚Ä¶</div>
      <div id="sugg" class="sugg"></div>
    </div>

    <div id="viewProfile" class="panel">
      <div class="row"><b>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> <span id="pfOnline" class="dot off"></span><span id="pfOnlineTxt">offline</span></div>
      <div class="row"><b>–í–µ–±-–ø–æ–∏—Å–∫:</b> <span id="pfWeb" class="dot off"></span><span id="pfWebTxt">off</span></div>
      <div class="row" style="gap:8px">
        <b>–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–æ–≤:</b>
        <button id="expAll" class="btn">‚§ì –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö</button>
        <button id="expCur" class="btn">‚§ì –≠–∫—Å–ø–æ—Ä—Ç —Ç–µ–∫—É—â–µ–≥–æ</button>
        <input id="impFile" type="file" accept="application/json" style="display:none">
        <button id="impBtn" class="btn">‚§í –ò–º–ø–æ—Ä—Ç JSON‚Ä¶</button>
        <button id="clearAll" class="btn" style="background:#2a0f14;border-color:#5e1d27">üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë</button>
      </div>
      <div class="row"><small>–≠–∫—Å–ø–æ—Ä—Ç —Å–æ–∑–¥–∞—ë—Ç —Ñ–∞–π–ª <code>jarvis-chats-YYYYMMDD.json</code>. –ò–º–ø–æ—Ä—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–∞–π–ª—ã, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —ç—Ç–æ–π –∫–Ω–æ–ø–∫–æ–π.</small></div>
    </div>

    <div class="composer">
      <textarea id="input" class="input" placeholder="–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ‚Ä¶" rows="1"></textarea>
      <button id="send" class="send">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
    </div>
  </main>
</div>

<div id="toast" class="toast">–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ</div>

<script>
if (location.protocol === 'file:') { alert('–û—Ç–∫—Ä–æ–π http://localhost:3000/ (–Ω–µ file://).'); }

/* ---------- theme ---------- */
function getTheme(){ try{return localStorage.getItem('jarvis.theme')||'dark';}catch{return 'dark';} }
function applyTheme(t){
  document.documentElement.setAttribute('data-theme', t);
  try{ localStorage.setItem('jarvis.theme', t); }catch{}
  if(themeBtn){ themeBtn.textContent = (t==='dark'?'üåô –¢–µ–º–∞':'‚òÄÔ∏è –¢–µ–º–∞'); }
}

/* ---------- settings ---------- */
const SKEY = 'jarvis.chats.v1';
const DRAFTS = 'jarvis.drafts.v1';
const INTENT_KEY = 'jarvis.intent.debug';
function getIntentDebug(){ try{return localStorage.getItem(INTENT_KEY)==='1';}catch{return false;} }
function setIntentDebug(v){ try{ localStorage.setItem(INTENT_KEY, v?'1':'0'); }catch{} if (intentBtn) intentBtn.textContent = 'üéØ –ò–Ω—Ç–µ–Ω—Ç—ã: ' + (v?'–≤–∫–ª':'–≤—ã–∫–ª'); }

/* ---------- storage ---------- */
let chats = loadChats();
let drafts = loadDrafts();
let currentId = chats.length ? chats[0].id : createChat('–ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥');

function loadChats(){ try{ return JSON.parse(localStorage.getItem(SKEY)) || []; }catch{ return []; } }
function saveChats(){ localStorage.setItem(SKEY, JSON.stringify(chats)); }
function loadDrafts(){ try{ return JSON.parse(localStorage.getItem(DRAFTS)) || {}; }catch{ return {}; } }
function saveDrafts(){ localStorage.setItem(DRAFTS, JSON.stringify(drafts)); }
function getDraft(id){ return drafts[id] || ''; }
function setDraft(id, text){ drafts[id] = text || ''; saveDrafts(); }
function createChat(title){ const id = 'c_'+Date.now(); chats.unshift({ id, title, msgs: [] }); saveChats(); return id; }
function setActive(id){ setDraft(currentId, elInput.value); currentId=id; renderChats(); renderMsgs(); elInput.value = getDraft(currentId); autoGrow(elInput); renderSugg(); }

/* ---------- elements ---------- */
const elChats = document.getElementById('chats');
const elMsgs = document.getElementById('msgs');
const elTyping = document.getElementById('typing');
const elInput = document.getElementById('input');
const elSend = document.getElementById('send');
const elStyle = document.getElementById('styleSel');
const elNew = document.getElementById('newChat');
const profileBtn = document.getElementById('profileBtn');
const themeBtn = document.getElementById('themeBtn');
const intentBtn = document.getElementById('intentBtn');

const dotOn = document.getElementById('dotOnline'), txtOn=document.getElementById('txtOnline');
const dotWeb = document.getElementById('dotWeb'), txtWeb=document.getElementById('txtWeb');
const pfOn = document.getElementById('pfOnline'), pfOnTxt=document.getElementById('pfOnlineTxt');
const pfWeb = document.getElementById('pfWeb'), pfWebTxt=document.getElementById('pfWebTxt');

const tabs = document.querySelectorAll('.tab');
const viewChat = document.getElementById('viewChat');
const viewProfile = document.getElementById('viewProfile');
const banner = document.getElementById('offlineBanner');
const btnReconnect = document.getElementById('reconnect');
const toast = document.getElementById('toast');
const sugg = document.getElementById('sugg');

/* –ø—Ä–æ—Ñ–∞–π–ª ‚Äî —ç–∫—Å–ø–æ—Ä—Ç/–∏–º–ø–æ—Ä—Ç */
const expAllBtn = document.getElementById('expAll');
const expCurBtn = document.getElementById('expCur');
const impBtn = document.getElementById('impBtn');
const impFile = document.getElementById('impFile');
const clearAllBtn = document.getElementById('clearAll');

function switchTab(name){
  tabs.forEach(t=> t.classList.toggle('active', t.dataset.tab===name));
  viewChat.classList.toggle('active', name==='chat');
  viewProfile.classList.toggle('active', name==='profile');
}
tabs.forEach(t => t.onclick = ()=> switchTab(t.dataset.tab));
profileBtn.onclick = ()=> switchTab('profile');
if(themeBtn){ themeBtn.onclick = ()=>{ const next = (getTheme()==='dark'?'light':'dark'); applyTheme(next); }; }
if(intentBtn){ intentBtn.onclick = ()=>{ setIntentDebug(!getIntentDebug()); renderMsgs(); }; }

function setDot(el, state){ el.className = 'dot ' + (state||'off'); }
function fmtTime(d=new Date()){ return d.toLocaleTimeString('ru-RU',{hour:'2-digit',minute:'2-digit'}); }
function showToast(msg='–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ'){ toast.textContent=msg; toast.classList.add('on'); setTimeout(()=>toast.classList.remove('on'), 1200); }

/* ---------- chats UI ---------- */
function renderChats(){
  elChats.innerHTML = '';
  chats.slice(0,200).forEach(c=>{
    const row = document.createElement('div');
    row.className = 'chat-item'+(c.id===currentId?' active':'');
    row.onclick = ()=> setActive(c.id);
    const title = document.createElement('div'); title.className='chat-title'; title.textContent=c.title||'–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
    const actions = document.createElement('div'); actions.className='chat-actions';
    const del = document.createElement('span'); del.textContent='‚úï'; del.style.cursor='pointer';
    del.onclick = (e)=>{ e.stopPropagation(); delete drafts[c.id]; saveDrafts(); chats = chats.filter(x=>x.id!==c.id); if(currentId===c.id) currentId = chats[0]?.id || createChat('–ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥'); saveChats(); renderChats(); renderMsgs(); elInput.value = getDraft(currentId); autoGrow(elInput); renderSugg(); };
    actions.appendChild(del);
    row.appendChild(title); row.appendChild(actions);
    elChats.appendChild(row);
  });
}

function makeLinkCard(urlStr){
  try{
    const u = new URL(urlStr);
    const dom = u.hostname.replace(/^www\./,'');
    const fav = 'https://www.google.com/s2/favicons?sz=64&domain='+u.hostname;
    const card = document.createElement('div');
    card.className='linkcard';
    const img = document.createElement('img'); img.src=fav; img.alt='';
    const span = document.createElement('span'); span.className='dom'; span.textContent = dom;
    const a = document.createElement('a'); a.href=urlStr; a.target='_blank'; a.className='go'; a.textContent='–û—Ç–∫—Ä—ã—Ç—å';
    card.appendChild(img); card.appendChild(span); card.appendChild(a);
    return card;
  }catch{ return null; }
}

function renderMsgs(){
  const chat = chats.find(c=>c.id===currentId);
  elMsgs.innerHTML = '';
  if(!chat){ return; }
  const showIntent = getIntentDebug();
  chat.msgs.forEach((m)=>{
    const wrap = document.createElement('div'); wrap.className='msg '+(m.who==='user'?'me':'bot');
    const bubble = document.createElement('div'); bubble.className='bubble'; bubble.textContent = m.text || '‚Äî';
    if(m.who==='bot'){
      const copy = document.createElement('button'); copy.className='copy'; copy.textContent='–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å';
      copy.onclick = async ()=>{ try{ await navigator.clipboard.writeText(m.text||''); showToast(); }catch{ showToast('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å'); } };
      bubble.appendChild(copy);
    }
    wrap.appendChild(bubble);

    if(m.actions?.length){
      const actWrap = document.createElement('div'); actWrap.className='actions';
      m.actions.forEach(a=>{
        if(a.type==='open_url' && a.url){
          const card = makeLinkCard(a.url);
          if(card) actWrap.appendChild(card);
          else { const link=document.createElement('a'); link.href=a.url; link.target='_blank'; link.className='action'; link.textContent='–û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É'; actWrap.appendChild(link); }
        }
      });
      wrap.appendChild(actWrap);
    }
    const meta=document.createElement('div'); meta.className='meta';
    meta.textContent = fmtTime(new Date(m.ts||Date.now()));
    if (showIntent && m.who==='bot' && m.intent) {
      const b = document.createElement('span'); b.className='ibadge'; b.textContent = m.intent;
      meta.appendChild(document.createTextNode(' ¬∑ '));
      meta.appendChild(b);
    }
    wrap.appendChild(meta);
    elMsgs.appendChild(wrap);
  });
  elMsgs.scrollTop = elMsgs.scrollHeight;
}

/* ---------- status/meta ---------- */
let lastMeta = { online:false, web:false };
async function refreshMeta(){
  try{
    const r = await fetch('/api/meta', { cache:'no-store' });
    const m = await r.json();
    const online = m.status==='online';
    lastMeta = { online, web: !!m.web_search_enabled };
    setDot(dotOn, online?'ok':'off'); txtOn.textContent = online?'online':'offline';
    setDot(dotWeb, m.web_search_enabled?'ok':'off'); txtWeb.textContent = m.web_search_enabled?'search on':'search off';
    setDot(pfOn, online?'ok':'off'); pfOnTxt.textContent = online?'online':'offline';
    setDot(pfWeb, m.web_search_enabled?'ok':'off'); pfWebTxt.textContent = m.web_search_enabled?'on':'off';
    banner.classList.remove('on'); elSend.disabled = false;
  }catch{
    lastMeta = { online:false, web:false };
    setDot(dotOn,'off'); txtOn.textContent='offline';
    setDot(dotWeb,'off'); txtWeb.textContent='search off';
    setDot(pfOn,'off'); pfOnTxt.textContent='offline';
    setDot(pfWeb,'off'); pfWebTxt.textContent='off';
    banner.classList.add('on'); elSend.disabled = false;
  } finally {
    renderSugg();
  }
}
document.getElementById('reconnect').onclick = refreshMeta;

/* ---------- suggestions ---------- */
function suggSet(){
  const base = [
    {t:"—Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏", send:true},
    {t:"–ø–æ–≥–æ–¥–∞ –≤ –¢–æ–∫–∏–æ", send:true},
    {t:"—Ç—Ä–µ–Ω–¥—ã —Ç–∏–∫—Ç–æ–∫–∞", send:true},
    {t:"—Å–∏—Ç—É–∞—Ü–∏—è –Ω–∞ —É–∫—Ä–∞–∏–Ω–µ", send:true},
    {t:"–ø–æ–≥–æ–¥–∞ –≤ –ù—å—é-–ô–æ—Ä–∫–µ", send:true},
    {t:"–∫–∞–∫ –¥–µ–ª–∞?", send:true}
  ];
  const offline = [
    {t:"–ø—Ä–∏–≤–µ—Ç", send:true},
    {t:"—Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏", send:true},
    {t:"–∫–∞–∫ –¥–µ–ª–∞?", send:true}
  ];
  if (!lastMeta.online || !lastMeta.web) return offline;
  const chat = chats.find(c=>c.id===currentId);
  const lastU = chat?.msgs?.slice().reverse().find(m=>m.who==='user')?.text?.toLowerCase() || '';
  if (lastU.includes('–ø–æ–≥–æ–¥')) {
    return [
      {t:"–ø–æ–≥–æ–¥–∞ –≤ –ü–∞—Ä–∏–∂–µ", send:true},
      {t:"–ø–æ–≥–æ–¥–∞ –≤ –ú–∏–ª–∞–Ω–µ", send:true},
      {t:"–ø–æ–≥–æ–¥–∞ –≤ –†–∏–º–µ", send:true}
    ];
  }
  if (lastU.includes('—Ç—Ä–µ–Ω–¥') || lastU.includes('–Ω–æ–≤–æ—Å—Ç')) {
    return [
      {t:"—Ç—Ä–µ–Ω–¥—ã —Ç–∏–∫—Ç–æ–∫–∞", send:true},
      {t:"–Ω–æ–≤–æ—Å—Ç–∏ —Å–µ–≥–æ–¥–Ω—è", send:true},
      {t:"—á—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–µ–π—á–∞—Å?", send:true}
    ];
  }
  return base;
}
function renderSugg(){
  const items = suggSet();
  sugg.innerHTML = '';
  items.forEach(it=>{
    const c = document.createElement('button');
    c.className='chip';
    c.textContent = it.t;
    c.onclick = ()=>{
      elInput.value = it.t;
      autoGrow(elInput);
      if (it.send) send();
    };
    sugg.appendChild(c);
  });
}

/* ---------- EXPORT / IMPORT ---------- */
function download(filename, dataStr){
  const blob = new Blob([dataStr], {type:'application/json'});
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a'); a.href=url; a.download=filename; document.body.appendChild(a);
  a.click(); a.remove(); URL.revokeObjectURL(url);
}
function yyyymmdd(){
  const d = new Date();
  const mm = String(d.getMonth()+1).padStart(2,'0');
  const dd = String(d.getDate()).padStart(2,'0');
  return `${d.getFullYear()}${mm}${dd}`;
}
function exportAll(){
  const payload = { version:1, exportedAt:new Date().toISOString(), chats, drafts };
  download(`jarvis-chats-${yyyymmdd()}.json`, JSON.stringify(payload,null,2));
}
function exportCurrent(){
  const cur = chats.find(c=>c.id===currentId);
  if(!cur){ return alert('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞'); }
  const payload = { version:1, exportedAt:new Date().toISOString(), chats:[cur], drafts:{ [currentId]: drafts[currentId]||'' } };
  const safeTitle = (cur.title||'chat').replace(/[^\w\-–∞-—è—ë ]/gi,'').slice(0,40).trim().replace(/\s+/g,'_') || 'chat';
  download(`jarvis-${safeTitle}-${yyyymmdd()}.json`, JSON.stringify(payload,null,2));
}
function validateImport(obj){
  if (typeof obj !== 'object' || !obj) return '–§–æ—Ä–º–∞—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω';
  if (!Array.isArray(obj.chats)) return '–ù–µ—Ç –ø–æ–ª—è "chats"';
  if (obj.chats.some(c=> typeof c.id!=='string' || !Array.isArray(c.msgs))) return '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Ç–æ–≤';
  return null;
}
async function importFromFile(file){
  try{
    const text = await file.text();
    const obj = JSON.parse(text);
    const err = validateImport(obj);
    if (err) return alert('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: '+err);
    // —Å–ª–∏—è–Ω–∏–µ: –Ω–æ–≤—ã–µ —á–∞—Ç—ã –¥–æ–±–∞–≤–∏–º –≤ –Ω–∞—á–∞–ª–æ
    const byId = new Set(chats.map(c=>c.id));
    (obj.chats||[]).forEach(c=>{
      if (!byId.has(c.id)) chats.unshift(c);
    });
    // —á–µ—Ä–Ω–æ–≤–∏–∫–∏
    Object.assign(drafts, obj.drafts||{});
    saveChats(); saveDrafts();
    renderChats(); renderMsgs(); renderSugg();
    alert('–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω ‚úÖ');
  }catch(e){
    console.error(e);
    alert('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª.');
  }
}
function clearAll(){
  if (!confirm('–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —á–∞—Ç—ã –∏ —á–µ—Ä–Ω–æ–≤–∏–∫–∏? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.')) return;
  chats = []; drafts = {};
  saveChats(); saveDrafts();
  currentId = createChat('–ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥');
  renderChats(); renderMsgs(); renderSugg();
  elInput.value = ''; autoGrow(elInput);
}

/* ---------- sending ---------- */
function addMsg(who,text,actions,intent){
  const chat = chats.find(c=>c.id===currentId); if(!chat) return;
  chat.msgs.push({ who, text, actions: actions||[], intent: intent||"", ts: Date.now() });
  if (who==='user' && (!chat.title || chat.title==='–ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥')) {
    chat.title = (text || '–ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥').slice(0,40);
  }
  saveChats(); renderMsgs();
}
async function send(){
  const text = elInput.value.trim(); if(!text) return;
  addMsg('user', text);
  setDraft(currentId, '');
  elInput.value=''; autoGrow(elInput);
  elTyping.classList.add('on'); elSend.disabled = true;
  try{
    const res = await fetch('/api/assist',{
      method:'POST',
      headers:{'Content-Type':'application/json'},
      body:JSON.stringify({ query:text, styleLock: elStyle.value })
    });
    const data = await res.json();
    elTyping.classList.remove('on'); elSend.disabled = false;
    addMsg('bot', data.reply || '‚Äî', data.actions||[], data.intent||"");
  }catch(e){
    elTyping.classList.remove('on'); elSend.disabled = false;
    addMsg('bot','‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ –æ—Ç–∫—Ä—ã—Ç http://localhost:3000/ –∏ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω.',[], "ERROR");
    banner.classList.add('on');
  } finally {
    renderSugg();
  }
}

/* ---------- utils & hooks ---------- */
function autoGrow(t){ t.style.height='auto'; t.style.height = Math.min(160, Math.max(44, t.scrollHeight)) + 'px'; }
document.getElementById('send').onclick = send;
document.getElementById('input').addEventListener('keydown',e=>{
  autoGrow(e.target);
  if(e.key==='Enter' && !e.shiftKey){ e.preventDefault(); send(); }
});
document.getElementById('input').addEventListener('input',e=>{
  autoGrow(e.target);
  setDraft(currentId, e.target.value);
});
document.getElementById('newChat').onclick = ()=> setActive(createChat('–ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥'));

function switchTabAndScrollProfile(){
  switchTab('profile');
  setTimeout(()=>{ document.getElementById('viewProfile').scrollIntoView({behavior:'smooth'}); }, 0);
}

/* –ø—Ä–æ—Ñ–∞–π–ª –∫–Ω–æ–ø–∫–∏ */
if (expAllBtn) expAllBtn.onclick = ()=> exportAll();
if (expCurBtn) expCurBtn.onclick = ()=> exportCurrent();
if (impBtn) impBtn.onclick = ()=> impFile.click();
if (impFile) impFile.onchange = (e)=>{ const f=e.target.files?.[0]; if(f) importFromFile(f); e.target.value=''; };
if (clearAllBtn) clearAllBtn.onclick = clearAll;

/* ---------- init ---------- */
applyTheme(getTheme());
setIntentDebug(getIntentDebug());
renderChats(); renderMsgs(); refreshMeta();
const helloMsg = '–ü—Ä–∏–≤–µ—Ç! –Ø –Ω–∞ —Å–≤—è–∑–∏. –°–ø—Ä–æ—Å–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å üòâ';
(function firstHello(){
  const chat = chats.find(c=>c.id===currentId);
  if(!chat || !chat.msgs || chat.msgs.length===0){ addMsg('bot', helloMsg, [], "GREETING"); }
})();
elInput.value = getDraft(currentId); autoGrow(elInput);
renderSugg();
</script>
</body>
</html>
