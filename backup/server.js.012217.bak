import express from "express";
import cors from "cors";
import dotenv from "dotenv";
import path from "path";
import { fileURLToPath } from "url";
import { fetch } from "undici";

dotenv.config();

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();
app.use(cors());
app.use(express.json());
app.use(express.static(path.join(__dirname, "public")));

const PORT = process.env.PORT || 3000;

/* ---------- helpers ---------- */
const B = `[\\s.,!?:;"'¬´¬ª()\\-]`;
function normalizeText(text) {
  const dict = { "—á–µ":"—á—Ç–æ","—á–æ":"—á—Ç–æ","—à–æ":"—á—Ç–æ","–∏–∑–∏":"–ª–µ–≥–∫–æ","—Ç–æ–ø—á–∏–∫":"–æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ","–≤–∏–¥–æ—Å":"–≤–∏–¥–µ–æ","–≥–æ":"–¥–∞–≤–∞–π","–ª—é—Ç—ã–π":"–æ—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π","–∫–∞–∫ –∂–∏–∑–Ω—å":"–∫–∞–∫ –¥–µ–ª–∞" };
  let norm = (text || "").toLowerCase().trim();
  for (const [slang, normal] of Object.entries(dict)) {
    norm = norm.replace(new RegExp(`(^|${B})${slang}(${B}|$)`, "gi"), `$1${normal}$2`);
  }
  return norm.replace(/\s+/g, " ");
}
function hasToken(str, token) { return new RegExp(`(^|${B})${token}(${B}|$)`,"i").test(str); }
function hasAnyToken(str, arr){ return arr.some(t => hasToken(str, t)); }
function hasPhrase(str, phrase){ return str.includes(phrase.toLowerCase()); }

function detectStyleAuto(text) {
  const t = (text || "").toLowerCase();
  const short = t.split(/\s+/).filter(Boolean).length <= 6;
  const slang = /(—á–µ|—á–æ|–∏–∑–∏|—Ç–æ–ø—á–∏–∫|–≥–æ|–Ω–æ—Ä–º–∞—Å|–ª—é—Ç—ã–π|—á–µ–ª|–±—Ä–æ|–ª–æ–ª|–∞—Ö–∞—Ö)/.test(t);
  const polite = /(–ø–æ–∂–∞–ª—É–π—Å—Ç–∞|–Ω–µ –º–æ–≥–ª–∏ –±—ã|–±—É–¥—å—Ç–µ –¥–æ–±—Ä—ã|–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ)/.test(t) || /(^|\s)–≤—ã(\s|$)/.test(t);
  if (polite && !slang) return "formal";
  if (slang || short) return "friendly";
  return "formal";
}
function applyStyleLock(autoStyle, styleLock) {
  if (styleLock === "friendly" || styleLock === "formal") return styleLock;
  return autoStyle;
}

/* ---------- WEATHER utils (Open-Meteo) ---------- */
const WMO = {
  0:"—è—Å–Ω–æ", 1:"–≤ –æ—Å–Ω–æ–≤–Ω–æ–º —è—Å–Ω–æ", 2:"–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å", 3:"–ø–∞—Å–º—É—Ä–Ω–æ",
  45:"—Ç—É–º–∞–Ω", 48:"–∏–∑–º–æ—Ä–æ–∑—å", 51:"–ª—ë–≥–∫–∞—è –º–æ—Ä–æ—Å—å", 53:"–º–æ—Ä–æ—Å—å", 55:"—Å–∏–ª—å–Ω–∞—è –º–æ—Ä–æ—Å—å",
  56:"–ª–µ–¥—è–Ω–∞—è –º–æ—Ä–æ—Å—å", 57:"—Å–∏–ª—å–Ω–∞—è –ª–µ–¥—è–Ω–∞—è –º–æ—Ä–æ—Å—å",
  61:"–Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å", 63:"–¥–æ–∂–¥—å", 65:"—Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å",
  66:"–ª–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å", 67:"—Å–∏–ª—å–Ω—ã–π –ª–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å",
  71:"–Ω–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥", 73:"—Å–Ω–µ–≥", 75:"—Å–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥",
  77:"—Å–Ω–µ–∂–Ω—ã–µ –∑—ë—Ä–Ω–∞", 80:"–ª–∏–≤–Ω–∏", 81:"—Å–∏–ª—å–Ω—ã–µ –ª–∏–≤–Ω–∏", 82:"–æ—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–µ –ª–∏–≤–Ω–∏",
  85:"—Å–Ω–µ–≥–æ–ø–∞–¥", 86:"—Å–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥–æ–ø–∞–¥",
  95:"–≥—Ä–æ–∑–∞", 96:"–≥—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–º", 99:"—Å–∏–ª—å–Ω–∞—è –≥—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–º"
};

async function geocode(place){
  const url = `https://geocoding-api.open-meteo.com/v1/search?name=${encodeURIComponent(place)}&count=1&language=ru&format=json`;
  const r = await fetch(url);
  if (!r.ok) throw new Error(`Geocode ${r.status}`);
  const j = await r.json();
  const loc = j.results?.[0];
  if (!loc) return null;
  return {
    name: loc.name,
    admin1: loc.admin1 || "",
    country: loc.country || "",
    lat: loc.latitude,
    lon: loc.longitude
  };
}
async function forecast(lat, lon){
  const url = `https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&current_weather=true&daily=temperature_2m_max,temperature_2m_min,precipitation_probability_max&timezone=auto`;
  const r = await fetch(url);
  if (!r.ok) throw new Error(`Forecast ${r.status}`);
  return r.json();
}
function extractPlace(query){
  // –±–µ—Ä—ë–º –≤—Å—ë –ø–æ—Å–ª–µ "–ø–æ–≥–æ–¥–∞ –≤ ..." –∏–ª–∏ "–∫–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤ ..."
  const q = normalizeText(query);
  const m = q.match(/–ø–æ–≥–æ–¥[–∞–µ—ã]? (–≤|–≤–æ)\s+(.+)/) || q.match(/–≤\s+(.+?)\s*(—Å–µ–π—á–∞—Å|—Å–µ–≥–æ–¥–Ω—è)?\s*–ø–æ–≥–æ–¥/);
  if (m) {
    const raw = (m[2] || m[1] || "").trim();
    return raw.replace(/^(–≥–æ—Ä–æ–¥|–≤ –≥–æ—Ä–æ–¥–µ|–≤ —Å—Ç—Ä–∞–Ω–µ)\s+/,'').trim();
  }
  // –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç: –ø–æ—Å–ª–µ "–≤ " –µ—Å–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç "–ø–æ–≥–æ–¥–∞" –≥–¥–µ-—Ç–æ –≤ –∑–∞–ø—Ä–æ—Å–µ
  if (/–ø–æ–≥–æ–¥/.test(q)) {
    const m2 = q.match(/–≤\s+([a-z–∞-—è—ë\-\s]+)$/i);
    if (m2) return m2[1].trim();
  }
  return null;
}

/* ---------- intents ---------- */
function detectIntent(query) {
  const q = normalizeText(query);
  if (!q) return "EMPTY";
  const words = q.split(/\s+/).filter(Boolean);
  const hasQ = /[?]/.test(q) || /(–∫—Ç–æ|—á—Ç–æ|–≥–¥–µ|–∫–æ–≥–¥–∞|–ø–æ—á–µ–º—É|–∑–∞—á–µ–º|–∫–∞–∫|—Å–∫–æ–ª—å–∫–æ)/.test(q);

  if (hasAnyToken(q, ["–ø—Ä–∏–≤–µ—Ç","–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π","–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ","–π–æ","—Ö–∞–π","–ø—Ä–∏–≤","–¥–∞—Ä–æ–≤–∞"])) return "GREETING";
  if (hasAnyToken(q, ["–∫–∞–∫ –¥–µ–ª–∞","—á—Ç–æ –Ω–æ–≤–æ–≥–æ","–∫–∞–∫ —Ç—ã","–∫–∞–∫ –∂–∏–∑–Ω—å"])) return "HOW_ARE_YOU";
  if (hasAnyToken(q, ["—Å–ø–∞—Å–∏–±–æ","–±–ª–∞–≥–æ–¥–∞—Ä—é","–º–µ—Ä—Å–∏"])) return "THANKS";
  if (hasAnyToken(q, ["–ø–æ–∫–∞","–¥–æ –≤—Å—Ç—Ä–µ—á–∏","—É–≤–∏–¥–∏–º—Å—è","–±–∞–π"])) return "BYE";
  if (hasPhrase(q,"—Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏") || hasPhrase(q,"—Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º—è") || hasAnyToken(q,["–∫–æ—Ç–æ—Ä—ã–π —á–∞—Å"]) || hasAnyToken(q,["–≤—Ä–µ–º—è"])) return "TIME";

  // WEATHER –¥–æ –≤–µ–±-–ø–æ–∏—Å–∫–∞
  if (/–ø–æ–≥–æ–¥|—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä|–¥–æ–∂–¥|—Å–Ω–µ–≥|–ø—Ä–æ–≥–Ω–æ–∑/.test(q)) return "WEATHER";

  // WEB_SEARCH
  if (hasAnyToken(q, ["–Ω–æ–≤–æ—Å—Ç–∏","—Ç—Ä–µ–Ω–¥—ã","—Å–∏—Ç—É–∞—Ü–∏—è","–æ–±—ä—è—Å–Ω–∏","google","–±—Ä–∞—É–∑–µ—Ä"]) ||
      hasPhrase(q,"—Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ") || hasPhrase(q,"—Ä–∞—Å—Å–∫–∞–∂–∏ –æ–±") || hasAnyToken(q,["–Ω–∞–π–¥–∏","–ø–æ–∏—â–∏","–≤ –≥—É–≥–ª–µ","–≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ"])) {
    return "WEB_SEARCH";
  }
  if (hasQ && words.length >= 4) return "WEB_SEARCH";
  if (words.length <= 3) return "SMALL_TALK";
  return "GENERAL_CHAT";
}

/* ---------- search (Brave) ---------- */
function getKey() {
  const k = (process.env.BRAVE_KEY || "").trim();
  const ascii = /^[\x00-\x7F]*$/.test(k);
  return { k, ascii, len: k.length };
}
async function braveSearch(q) {
  const { k, ascii } = getKey();
  if (!k || !ascii) return { disabled: true, items: [] };
  const url = `https://api.search.brave.com/res/v1/web/search?q=${encodeURIComponent(q)}&count=3&freshness=day`;
  const res = await fetch(url, { headers: { "X-Subscription-Token": k } });
  if (!res.ok) {
    const body = await res.text().catch(()=> "");
    throw new Error(`Brave API ${res.status}: ${body}`);
  }
  const data = await res.json();
  const items = (data.web?.results ?? []).map(r => ({
    title: r.title, url: r.url, snippet: r.snippet || r.description || ""
  }));
  return { disabled: false, items };
}

/* ---------- routes ---------- */
app.get("/healthz", (_req,res)=>res.json({ok:true,time:new Date().toISOString()}));
app.get("/api/meta", (_req,res)=>{
  const k = getKey();
  res.json({
    status:"online",
    web_search_enabled: !!(k.k && k.ascii)
  });
});

app.post("/api/assist", async (req,res)=>{
  try{
    const query = (req.body?.query || "").trim();
    const styleLock = (req.body?.styleLock || "auto");
    if (!query) return res.status(400).json({ reply: "–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å.", style: "formal" });

    const intent = detectIntent(query);
    const autoStyle = detectStyleAuto(query);
    const style = applyStyleLock(autoStyle, styleLock);

    console.log(`[assist] intent=${intent} style=${style} query="${query}"`);

    if (intent === "GREETING")
      return res.json({ reply: style==="friendly"?"–ô–æ! üëã –†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å üòé":"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!", style });
    if (intent === "HOW_ARE_YOU")
      return res.json({ reply: style==="friendly"?"–î–∞ –Ω–æ—Ä–º–∞—Å, –≤—Å—ë —á—ë—Ç–∫–æ üòé –ê —É —Ç–µ–±—è –∫–∞–∫?":"–£ –º–µ–Ω—è –≤—Å—ë —Ö–æ—Ä–æ—à–æ, —Å–ø–∞—Å–∏–±–æ. –ö–∞–∫ —É –≤–∞—Å –¥–µ–ª–∞?", style });
    if (intent === "THANKS")
      return res.json({ reply: style==="friendly"?"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! üôå":"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞.", style });
    if (intent === "BYE")
      return res.json({ reply: style==="friendly"?"–î–æ —Å–≤—è–∑–∏! üëã":"–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!", style });
    if (intent === "TIME") {
      const now = new Date().toLocaleTimeString("ru-RU",{hour:"2-digit",minute:"2-digit"});
      return res.json({ reply: style==="friendly"?`–ë—Ä–æ, —Å–µ–π—á–∞—Å ${now} üòâ`:`–°–µ–π—á–∞—Å ${now}.`, style });
    }

    if (intent === "WEATHER") {
      const place = extractPlace(query) || query.replace(/(–∫–∞–∫–∞—è|–∫–∞–∫–æ–π|—Ç–µ–∫—É—â–∞—è|—Å–µ–π—á–∞—Å|–ø–æ–≥–æ–¥–∞|–ø—Ä–æ–≥–Ω–æ–∑|–≤|–≤–æ)/gi,'').trim();
      if (!place) {
        const ask = style==="friendly" ? "–°–∫–∞–∂–∏ –≥–æ—Ä–æ–¥: ¬´–ø–æ–≥–æ–¥–∞ –≤ –¢–æ–∫–∏–æ¬ª" : "–£—Ç–æ—á–Ω–∏—Ç–µ –≥–æ—Ä–æ–¥: ¬´–ø–æ–≥–æ–¥–∞ –≤ –¢–æ–∫–∏–æ¬ª.";
        return res.json({ reply: ask, style });
      }
      const loc = await geocode(place);
      if (!loc) {
        const msg = style==="friendly" ? `–ù–µ –Ω–∞—à—ë–ª –ª–æ–∫–∞—Ü–∏—é ¬´${place}¬ª üòÖ` : `–õ–æ–∫–∞—Ü–∏—è ¬´${place}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`;
        return res.json({ reply: msg, style });
      }
      const fc = await forecast(loc.lat, loc.lon);
      const cur = fc.current_weather || {};
      const w = WMO[cur.weathercode] || "–ø–æ–≥–æ–¥–∞";
      const t = typeof cur.temperature === "number" ? Math.round(cur.temperature) : null;
      const wind = typeof cur.windspeed === "number" ? Math.round(cur.windspeed) : null;

      const label = [loc.name, loc.admin1, loc.country].filter(Boolean).join(", ");
      let line = style==="friendly"
        ? `–í ${label} —Å–µ–π—á–∞—Å ${t!==null?`${t}¬∞C`: "‚Äî"} (${w}). –í–µ—Ç–µ—Ä ${wind!==null?`${wind} –º/—Å`:"‚Äî"}.`
        : `–°–µ–π—á–∞—Å –≤ ${label}: ${t!==null?`${t}¬∞C`: "‚Äî"} (${w}). –í–µ—Ç–µ—Ä ${wind!==null?`${wind} –º/—Å`:"‚Äî"}.`;

      const src = `https://open-meteo.com/`;
      return res.json({
        reply: `${line}\n–ò—Å—Ç–æ—á–Ω–∏–∫: ${src}`,
        style,
        actions:[{ type:"open_url", url: src }]
      });
    }

    if (intent === "SMALL_TALK")
      return res.json({ reply: style==="friendly"?"–ü–æ–Ω—è–ª üëç –°–ø—Ä–æ—Å–∏ —á—Ç–æ-—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ.":"–ü–æ–Ω–∏–º–∞—é. –£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.", style });

    if (intent === "GENERAL_CHAT")
      return res.json({ reply: style==="friendly"?"–û–∫–µ–π, –ø–æ–Ω—è–ª —Ç–µ–±—è. –ú–æ–≥—É –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–∫—Ç–æ–≤ –∏–ª–∏ —Å—Å—ã–ª–æ–∫, –µ—Å–ª–∏ –Ω–∞–¥–æ üòâ":"–ü–æ–Ω–∏–º–∞—é. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –º–æ–≥—É –¥–æ–±–∞–≤–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –∏–ª–∏ —Å—Å—ã–ª–∫–∏.", style });

    // WEB_SEARCH
    const { disabled, items } = await braveSearch(normalizeText(query));
    if (disabled) return res.json({ reply: "–ü–æ–∏—Å–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–∫–ª—é—á –Ω–µ –∑–∞–¥–∞–Ω/–Ω–µ ASCII).", style });
    if (!items.length) return res.json({ reply: `–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ ¬´${query}¬ª.`, style });

    const top = items[0];
    return res.json({ reply: `${top.snippet || ""}\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ: ${top.url}`, style, actions:[{type:"open_url",url:top.url}] });

  } catch(e) {
    console.error(e);
    return res.status(500).json({ reply:"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.", style:"formal" });
  }
});

/* ---------- start ---------- */
app.listen(PORT, ()=> {
  const k = getKey();
  console.log(`BRAVE len=${k.len} ascii=${k.ascii}`);
  console.log(`‚úÖ Server ready: http://localhost:${PORT}`);
  console.log(`üîé Health:  http://localhost:${PORT}/healthz`);
  console.log(`‚ÑπÔ∏è  Meta:    http://localhost:${PORT}/api/meta`);
});
